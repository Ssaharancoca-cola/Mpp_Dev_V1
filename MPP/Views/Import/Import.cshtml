@model List<Model.Entity_Type_Attr_Detail>

<form id="formid">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb rounded-3">
            @if (Context.Session.GetString("SelectedDimensionData") != null && Context.Session.GetString("EntityName") != null)
            {
                <li class="breadcrumb-item">
                    <a class="link-body-emphasis" href="/Home">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house-door" viewBox="0 0 16 16">
                            <path d="M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4z" />
                        </svg>
                        <span class="visually-hidden">Home</span>
                    </a>
                </li>
                @if (Context.Session.GetString("SelectedDimensionData") != null && Context.Session.GetString("EntityName") != null)
                {
                    <li class="breadcrumb-item">
                        <a class="link-body-emphasis fw-semibold text-decoration-none" >@Context.Session.GetString("SelectedDimensionData").ToString() </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        @Context.Session.GetString("EntityName").ToString()
                    </li>
                }
            }
        </ol>
    </nav>
 
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
        <h1 class="h2">Import</h1>

    </div>
    <div class="card box-shadow">
        <div class="card-header">
            <h5 class="mb-0">Import</h5>
        </div>
        <div class="card-body">
            <div class="wrapper-export">
                <div class="form-group">
                    <label id="lblSelectAll" CssClass="editlabel">Select All</label>
                    <span>:</span>
                    @Html.CheckBox("chkSelectAll", new { @class = "chkSelectAll" })
                </div>
                @foreach (var menuOption in Model)
                {


                    if (@menuOption.Isvisible != "N")
                    {
                        <div class="form-group">
                            <label id=@menuOption.AttrName>@menuOption.AttrDisplayName <em style="color:red">*</em></label>
                            <span>:</span>

                            @if (@menuOption.AttrDataType == "SUPPLIED_CODE")
                            {
                                @Html.CheckBox(@menuOption.AttrName, new { @class = "checkbox", @checked = true, @disabled = true, @mandatory = true })
                            }
                            else
                            {
                                @Html.CheckBox(@menuOption.AttrName, new { @class = "checkbox",@checked = true, @disabled = true })
                            }
                            
                            @*@if (@menuOption.AttrDisplayName.ToUpper() == "SORT ORDER")
                            {
                                <label id="lblSORT_ORDER_format" class="hintlabel"> &nbsp;(9999999999)</label>
                                
                            }*@

                        </div>
                    }
                }
                <div class="form-group">
                    <label id="lblEffectiveDate" CssClass="editlabel">Effective Date <em>(MM/DD/YYYY)</em></label>
                    <span>:</span>
                    @Html.CheckBox("DATE_FROM", new { @class = "label" })


                </div>
                <div class="form-group flex-column mt-4">
                    <label CssClass="editlabel">File Type :</label>
                    @Html.DropDownList("ddlFileFormat", new List<SelectListItem>
                    { /*new SelectListItem{Text="Excel", Value="Excel"},*/
                    new SelectListItem{Text="Csv", Value="Csv"}}, new { @class = "editdropdown form-control", @id = "ddlFileFormat" })
                    <input type="file" name="file" id="file" />
                </div>                
                <div class="ctn-export mb-3">
                    <button type="submit" class="btn btn-primary" id="btnImport" name="Command" value="Import">
                        Import
                    </button>
                    <button type="submit" class="btn btn-outline-primary" id="btnCancel" name="Command" value="Cancel">
                        Cancel
                    </button>

                </div>

            </div>
            <p>
                <label style="font-weight:bold">Note :</label>
                <em>
                    Header Format should be
                    @foreach (var menuOption in Model)
                    {
                        <label>@menuOption.AttrName.ToString()</label>
                        <label>,</label>
                    }
                    DATE_FROM
                </em>
            </p>
        </div>
    </div>




    <table border="0" cellpadding="0" cellspacing="0">
        <tr>
            <td align="center">

                <div style="display:none" id="">
                    <img src="~/Images/spinner.gif" Height="54px" Width="86px" alt="Loading, please wait" />
                </div>

            </td>
        </tr>
    </table>
</form>

<script type="text/javascript">
    $(document).ready(function () {
        $("#btnImport").click(function () {
            if (!confirm("Are you sure you want to Import?")) {
                return false;
            }
        });
        $("#btnCancel").click(function () {
            $('#AttributeDetail').html();
            $('#viewPlaceHolder').html();

        });
        //$("#chkSelectAll").change(function () {
        //    var status = this.checked;
        //    $('.label').each(function () {
        //        this.checked = status;
        //    });
        //});
        //$('.label').change(function () {
        //    if (this.checked === false) {
        //        $('#chkSelectAll')[0].checked = false;
        //    } else {
        //        // Check if all other checkboxes are checked
        //        if ($('.label:checked').length === $('.label').length) {
        //            $('#chkSelectAll')[0].checked = true;
        //        }
        //    }
        //});
        $("#chkSelectAll").change(function () {
            var status = this.checked;
            // Only toggle checkboxes that are not marked as mandatory
            $('.label').not('[mandatory="true"]').each(function () {
                this.checked = status;
            });
            // For checkboxes that are mandatory, ensure they remain checked
            $('.label[mandatory="true"]').each(function () {
                this.checked = true; // Keep mandatory checkboxes checked
            });
        });
    });
    $('#formid').on('submit', submitFormWithAjax);

    function submitFormWithAjax(event) {
        event.preventDefault();
        let isAllMandatoryChecked = true;

        $('input[mandatory="true"]').each(function () {
            debugger;
            if (!this.checked) {
                isAllMandatoryChecked = false;
                return false;
            }
        });

        if (!isAllMandatoryChecked) {
            alert('Please select all mandatory fields before importing.');
            return;
        }
        let form = new FormData();
        $('#formid input, #formid select').each(function () {
            if ($(this).attr('type') === 'checkbox') {
                form.append($(this).attr('name'), $(this).prop('checked'));
            }
        });
        form.append("Command", $(document.activeElement).attr("value"));
        form.append("file", $("#file").get(0).files[0]);
        form.append("ddlFileFormat", $("#ddlFileFormat").val());

        $.ajax({
            type: 'POST',
            url: '@Url.Action("ImportData", "Import")',
            data: form,
            processData: false,
            contentType: false,
            success: function (data) {
                onSuccess(data);
            },
            error: function (err) {
                alert(result.replace("error", ""));
            }
        });

        function onSuccess(result) {
            if (result.indexOf("error") == 0) {
                alert(result.replace("error", ""));
            }
            else if (result.indexOf("success") == 0) {
                alert(result.replace("success", ""));
                $.post('@Url.Action("ShowAttribute", "Menu")', { entityTypeId: '@Context.Session.GetInt32("EntityTypeID")', entityName: '@Context.Session.GetString("EntityName")', viewType: "search" },
                    function (data) {
                        if (data.indexOf("Access denied") > -1) {
                            alert(data);
                        }
                        else {
                            $('#AttributeDetail').empty();

                            $('#AttributeDetail').html(data);

                            $('#lblcaption').html('@Context.Session.GetString("EntityName")');
                            $('#viewPlaceHolder').empty();
                        }

                    });
            }
            else if (result.indexOf("import") == 0) {
                debugger;
                //window.location.href = 'MPP/Import/Download?path=' + result;
                window.location.href = 'Import/Download?path=' + result;

                alert("Please refer downloaded file for rejected records");
            }
            else {
                $('#AttributeDetail').empty();
                $('#viewPlaceHolder').empty();

                $('#AttributeDetail').html(result);
            }
        }
    }



</script>






