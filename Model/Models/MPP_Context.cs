// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Model.Models
{
    public partial class MPP_Context : DbContext
    {
        public MPP_Context()
        {
        }

        public MPP_Context(DbContextOptions<MPP_Context> options)
            : base(options)
        {
        }

        public virtual DbSet<DimBusinessorg> DimBusinessorg { get; set; }
        public virtual DbSet<Dimension> Dimension { get; set; }
        public virtual DbSet<Entity> Entity { get; set; }
        public virtual DbSet<EntityType> EntityType { get; set; }
        public virtual DbSet<EntityTypeAttr> EntityTypeAttr { get; set; }
        public virtual DbSet<EntityTypeAttrLov> EntityTypeAttrLov { get; set; }
        public virtual DbSet<EntityTypeRelation> EntityTypeRelation { get; set; }
        public virtual DbSet<LdEntCountry> LdEntCountry { get; set; }
        public virtual DbSet<LdEntCountryGroup> LdEntCountryGroup { get; set; }
        public virtual DbSet<LdEntEntity> LdEntEntity { get; set; }
        public virtual DbSet<LdEntSubGroup> LdEntSubGroup { get; set; }
        public virtual DbSet<LoadEntity> LoadEntity { get; set; }
        public virtual DbSet<MppConfig> MppConfig { get; set; }
        public virtual DbSet<MppUser> MppUser { get; set; }
        public virtual DbSet<MppUserPrivilage> MppUserPrivilage { get; set; }
        public virtual DbSet<Querytext2> Querytext2 { get; set; }
        public virtual DbSet<Querytexttype2> Querytexttype2 { get; set; }

        //Entity Model
        public DbSet<UserInfo> UserInfo { get; set; }
        public DbSet<DimensionName> DimensionName { get; set; }
        public DbSet<Previleges> Previleges { get; set; }
        public DbSet<DropDownData> DropDownData { get; set; }
        public DbSet<PK_CODE> Pk_Code { get; set; }
        public DbSet<attr_data> attr_Data { get; set; }
        public DbSet<ROLE> role { get; set; }
        public DbSet<UserRowSecurity> userRowSecurity { get; set; }
        public DbSet<RowLevelSecurityOperator> rowLevelSecurityOperator { get; set; }
        public DbSet<RowLevelSecurityValues> rowLevelSecurityValue { get; set; }
        public DbSet<UserSecurityValuess> userSecurityValue { get; set; }
        public DbSet<ApproverDetails> approverDetails { get; set; }
        public DbSet<ApproverDetail> approverDetail { get; set; }
        public DbSet<CNTS> cNT { get; set; }
        public DbSet<UserDto> userDto { get; set; }
        public DbSet<MailData> mailData { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                // optionsBuilder.UseSqlServer("Data Source=zwPmyad0001;Initial Catalog=MPP_PROD;Persist Security Info=True;User ID=MPP_PROD_APP;Password=5w!p2oP&LmAvBu;Connection Timeout=180;TrustServerCertificate=True");

                //  optionsBuilder.UseSqlServer("Data Source=zwqmyad0001;Initial Catalog=MPP_QA;Persist Security Info=True;User ID=MPP_DEV_APP;Password=LZ/&&S]Q9rnin8)5;Connection Timeout=180;TrustServerCertificate=True");

                optionsBuilder.UseSqlServer("Data Source=zwdmyad0001;Initial Catalog=MPP_DEV;Persist Security Info=True;User ID=MPP_DEV_APP;Password=LASyYbj0ZX#B;Connection Timeout=180;TrustServerCertificate=True");
            }
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<UserInfo>().HasNoKey();
            modelBuilder.Entity<DimensionName>().HasNoKey();
            modelBuilder.Entity<Previleges>().HasNoKey();
            modelBuilder.Entity<DropDownData>().HasNoKey();
            modelBuilder.Entity<PK_CODE>().HasNoKey();
            modelBuilder.Entity<attr_data>().HasNoKey();
            modelBuilder.Entity<ROLE>().HasNoKey();
            modelBuilder.Entity<UserRowSecurity>().HasNoKey();
            modelBuilder.Entity<RowLevelSecurityOperator>().HasNoKey();
            modelBuilder.Entity<RowLevelSecurityValues>().HasNoKey();
            modelBuilder.Entity<UserSecurityValuess>().HasNoKey();
            modelBuilder.Entity<ApproverDetails>().HasNoKey();
            modelBuilder.Entity<ApproverDetail>().HasNoKey();
            modelBuilder.Entity<CNTS>().HasNoKey();
            modelBuilder.Entity<UserDto>().HasNoKey();
            modelBuilder.Entity<MailData>().HasNoKey(); modelBuilder.Entity<DimBusinessorg>(entity =>
            {
                entity.ToTable("DIM_BUSINESSORG", "MPP_APP");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CusCustomerLoid).HasColumnName("CUS_CUSTOMER_LOID");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("date")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.DateTo)
                    .HasColumnType("date")
                    .HasColumnName("DATE_TO");

                entity.Property(e => e.Dlevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DLEVEL");

                entity.Property(e => e.EditLevel).HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.EntCountryGroupLoid).HasColumnName("ENT_COUNTRY_GROUP_LOID");

                entity.Property(e => e.EntCountryGroupOid).HasColumnName("ENT_COUNTRY_GROUP_OID");

                entity.Property(e => e.EntCountryLoid).HasColumnName("ENT_COUNTRY_LOID");

                entity.Property(e => e.EntCountryOid).HasColumnName("ENT_COUNTRY_OID");

                entity.Property(e => e.EntEntityLoid).HasColumnName("ENT_ENTITY_LOID");

                entity.Property(e => e.EntEntityOid).HasColumnName("ENT_ENTITY_OID");

                entity.Property(e => e.EntGroupLoid).HasColumnName("ENT_GROUP_LOID");

                entity.Property(e => e.EntGroupOid).HasColumnName("ENT_GROUP_OID");

                entity.Property(e => e.EntMasterGroupLoid).HasColumnName("ENT_MASTER_GROUP_LOID");

                entity.Property(e => e.EntMasterGroupOid).HasColumnName("ENT_MASTER_GROUP_OID");

                entity.Property(e => e.EntSiteLoid).HasColumnName("ENT_SITE_LOID");

                entity.Property(e => e.EntSiteOid).HasColumnName("ENT_SITE_OID");

                entity.Property(e => e.EntSubGroupLoid).HasColumnName("ENT_SUB_GROUP_LOID");

                entity.Property(e => e.EntSubGroupOid).HasColumnName("ENT_SUB_GROUP_OID");

                entity.Property(e => e.Oid).HasColumnName("OID");
            });

            modelBuilder.Entity<Dimension>(entity =>
            {
                entity.HasKey(e => e.DimensionName);

                entity.ToTable("DIMENSION", "MPP_CORE");

                entity.Property(e => e.DimensionName)
                    .HasMaxLength(25)
                    .HasColumnName("DIMENSION_NAME")
                    .IsFixedLength();

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("DISPLAY_NAME")
                    .IsFixedLength();

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.FlattenedTableName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("FLATTENED_TABLE_NAME")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Entity>(entity =>
            {
                entity.HasKey(e => e.Oid);

                entity.ToTable("ENTITY", "MPP_CORE");

                entity.Property(e => e.Oid)
                    .ValueGeneratedNever()
                    .HasColumnName("OID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.EditLevel).HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.EntityEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENTITY_END_DATE");

                entity.Property(e => e.EntityLatestName).HasColumnName("ENTITY_LATEST_NAME");

                entity.Property(e => e.EntityStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ENTITY_START_DATE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.InternalCode)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_CODE");

                entity.Property(e => e.LastUpdatedTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TIME_STAMP")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LatestFlag)
                    .HasColumnName("LATEST_FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasColumnName("MODIFIED_BY");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(50)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.SuppliedCode1)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE1");

                entity.Property(e => e.SuppliedCode2)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE2");

                entity.Property(e => e.SuppliedCode3)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE3");

                entity.Property(e => e.SuppliedCode4)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE4");

                entity.Property(e => e.SuppliedCode5)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE5");
            });

            modelBuilder.Entity<EntityType>(entity =>
            {
                entity.ToTable("ENTITY_TYPE", "MPP_CORE");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DefaultSortBy).HasColumnName("DEFAULT_SORT_BY");

                entity.Property(e => e.DefaultSortOrder)
                    .HasMaxLength(10)
                    .HasColumnName("DEFAULT_SORT_ORDER");

                entity.Property(e => e.DimensionDisplayName)
                    .HasMaxLength(100)
                    .HasColumnName("DIMENSION_DISPLAY_NAME");

                entity.Property(e => e.DimensionName)
                    .IsRequired()
                    .HasColumnName("DIMENSION_NAME");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasColumnName("DISPLAY_NAME");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.EntityHierarchyGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_HIERARCHY_GROUP");

                entity.Property(e => e.InputTableName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("INPUT_TABLE_NAME");

                entity.Property(e => e.IsManyToMany).HasColumnName("IS_MANY_TO_MANY");

                entity.Property(e => e.IsStrongEntity).HasColumnName("IS_STRONG_ENTITY");

                entity.Property(e => e.IsSubType).HasColumnName("IS_SUB_TYPE");

                entity.Property(e => e.IsSuperType).HasColumnName("IS_SUPER_TYPE");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<EntityTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.EntityTypeId, e.AttrName })
                    .HasName("ENTITY_TYPE_ATTR_PK");

                entity.ToTable("ENTITY_TYPE_ATTR", "MPP_CORE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(500)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDataType)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("ATTR_DATA_TYPE");

                entity.Property(e => e.AttrDisplayName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DISPLAY_NAME");

                entity.Property(e => e.AttrDisplayOrder).HasColumnName("ATTR_DISPLAY_ORDER");

                entity.Property(e => e.AttrLength).HasColumnName("ATTR_LENGTH");

                entity.Property(e => e.AttrPrecision).HasColumnName("ATTR_PRECISION");

                entity.Property(e => e.CasDrop)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CAS_DROP");

                entity.Property(e => e.CasQuery)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAS_QUERY");

                entity.Property(e => e.ColumnSequence).HasColumnName("COLUMN_SEQUENCE");

                entity.Property(e => e.Derivation)
                    .HasMaxLength(250)
                    .HasColumnName("DERIVATION");

                entity.Property(e => e.DisplayType)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DISPLAY_TYPE");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.HistoryQuery)
                    .IsUnicode(false)
                    .HasColumnName("HISTORY_QUERY");

                entity.Property(e => e.IsDerived).HasColumnName("IS_DERIVED");

                entity.Property(e => e.IsHyperlinked).HasColumnName("IS_HYPERLINKED");

                entity.Property(e => e.IsListable).HasColumnName("IS_LISTABLE");

                entity.Property(e => e.IsMandatoryFlag).HasColumnName("IS_MANDATORY_FLAG");

                entity.Property(e => e.IsPartOfCode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("IS_PART_OF_CODE");

                entity.Property(e => e.IsSearchable).HasColumnName("IS_SEARCHABLE");

                entity.Property(e => e.Isvisible)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISVISIBLE");

                entity.Property(e => e.ListBoxQuery)
                    .IsUnicode(false)
                    .HasColumnName("LIST_BOX_QUERY");

                entity.Property(e => e.ParentEntityTypeId).HasColumnName("PARENT_ENTITY_TYPE_ID");
            });

            modelBuilder.Entity<EntityTypeAttrLov>(entity =>
            {
                entity.HasKey(e => new { e.AttrName, e.EntityTypeId, e.ValidValues })
                    .HasName("PK__ENTITY_T__6B57F4BB10120E73");

                entity.ToTable("ENTITY_TYPE_ATTR_LOV", "MPP_CORE");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(500)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.ValidValues)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VALID_VALUES");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.ValueName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VALUE_NAME");

                entity.HasOne(d => d.EntityTypeAttr)
                    .WithMany(p => p.EntityTypeAttrLov)
                    .HasForeignKey(d => new { d.EntityTypeId, d.AttrName })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ETAL_ETID_ANAME");
            });

            modelBuilder.Entity<EntityTypeRelation>(entity =>
            {
                entity.HasKey(e => new { e.EntityTypeId, e.ParentEntityTypeId })
                    .HasName("ENTITY_TYPE_RELATION_PK");

                entity.ToTable("ENTITY_TYPE_RELATION", "MPP_CORE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.ParentEntityTypeId).HasColumnName("PARENT_ENTITY_TYPE_ID");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.FlatFlag).HasColumnName("FLAT_FLAG");

                entity.Property(e => e.IsIdentifyingRelation).HasColumnName("IS_IDENTIFYING_RELATION");

                entity.Property(e => e.IsMandatoryFlag).HasColumnName("IS_MANDATORY_FLAG");

                entity.Property(e => e.IsTimeVariantFlag).HasColumnName("IS_TIME_VARIANT_FLAG");

                entity.Property(e => e.ToBeFlattened).HasColumnName("TO_BE_FLATTENED");
            });

            modelBuilder.Entity<LdEntCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LD_ENT_COUNTRY", "MPP_APP");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ID");

                entity.Property(e => e.ApproverLevel)
                    .HasMaxLength(10)
                    .HasColumnName("APPROVER_LEVEL")
                    .IsFixedLength();

                entity.Property(e => e.ApproverStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_STATUS");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedDate).HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_USER_ID");

                entity.Property(e => e.CurrentEditLevel).HasColumnName("CURRENT_EDIT_LEVEL");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("date")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.DateTo)
                    .HasColumnType("date")
                    .HasColumnName("DATE_TO");

                entity.Property(e => e.DummyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DUMMY_FLAG");

                entity.Property(e => e.EffectiveEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_END_DATE");

                entity.Property(e => e.EffectiveStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_START_DATE");

                entity.Property(e => e.EntCountryCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_CODE");

                entity.Property(e => e.EntCountryDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_DESC");

                entity.Property(e => e.EntCountryGroupCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_GROUP_CODE");

                entity.Property(e => e.EntCountryLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_LONG_NAME");

                entity.Property(e => e.EntCountryShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_SHORT_NAME");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MESSAGE");

                entity.Property(e => e.InputRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("input_row_id");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastUpdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATE_TIME");

                entity.Property(e => e.LdOid).HasColumnName("LD_OID");

                entity.Property(e => e.RecLockFlag)
                    .HasColumnName("REC_LOCK_FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowSecFlag)
                    .HasColumnName("ROW_SEC_FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("ROW_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.TreatNullsAsNulls)
                    .HasColumnName("TREAT_NULLS_AS_NULLS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UpdatedUserid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDATED_USERID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_LEVEL");

                entity.Property(e => e.Validationcode)
                    .IsUnicode(false)
                    .HasColumnName("VALIDATIONCODE")
                    .HasDefaultValueSql("('ENTCTR_')");

                entity.Property(e => e.WarningMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WARNING_MESSAGE");
            });

            modelBuilder.Entity<LdEntCountryGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LD_ENT_COUNTRY_GROUP", "MPP_APP");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ID");

                entity.Property(e => e.ApproverLevel)
                    .HasMaxLength(10)
                    .HasColumnName("APPROVER_LEVEL")
                    .IsFixedLength();

                entity.Property(e => e.ApproverStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_STATUS");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedDate).HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_USER_ID");

                entity.Property(e => e.CurrentEditLevel).HasColumnName("CURRENT_EDIT_LEVEL");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("date")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.DateTo)
                    .HasColumnType("date")
                    .HasColumnName("DATE_TO");

                entity.Property(e => e.DummyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DUMMY_FLAG");

                entity.Property(e => e.EffectiveEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_END_DATE");

                entity.Property(e => e.EffectiveStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_START_DATE");

                entity.Property(e => e.EntCountryGroupCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_GROUP_CODE");

                entity.Property(e => e.EntCountryGroupDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_GROUP_DESC");

                entity.Property(e => e.EntCountryGroupLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_GROUP_LONG_NAME");

                entity.Property(e => e.EntCountryGroupShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_COUNTRY_GROUP_SHORT_NAME");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MESSAGE");

                entity.Property(e => e.InputRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("input_row_id");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastUpdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATE_TIME");

                entity.Property(e => e.LdOid).HasColumnName("LD_OID");

                entity.Property(e => e.RecLockFlag)
                    .HasColumnName("REC_LOCK_FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowSecFlag)
                    .HasColumnName("ROW_SEC_FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("ROW_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.TreatNullsAsNulls)
                    .HasColumnName("TREAT_NULLS_AS_NULLS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UpdatedUserid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDATED_USERID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_LEVEL");

                entity.Property(e => e.Validationcode)
                    .IsUnicode(false)
                    .HasColumnName("VALIDATIONCODE")
                    .HasDefaultValueSql("('ENTCTG_')");

                entity.Property(e => e.WarningMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WARNING_MESSAGE");
            });

            modelBuilder.Entity<LdEntEntity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LD_ENT_ENTITY", "MPP_APP");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ID");

                entity.Property(e => e.ApproverLevel)
                    .HasMaxLength(10)
                    .HasColumnName("APPROVER_LEVEL")
                    .IsFixedLength();

                entity.Property(e => e.ApproverStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_STATUS");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedDate).HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_USER_ID");

                entity.Property(e => e.CurrentEditLevel).HasColumnName("CURRENT_EDIT_LEVEL");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("date")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.DateTo)
                    .HasColumnType("date")
                    .HasColumnName("DATE_TO");

                entity.Property(e => e.DummyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DUMMY_FLAG");

                entity.Property(e => e.EffectiveEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_END_DATE");

                entity.Property(e => e.EffectiveStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_START_DATE");

                entity.Property(e => e.EntEntityCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_ENTITY_CODE");

                entity.Property(e => e.EntEntityDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_ENTITY_DESC");

                entity.Property(e => e.EntEntityLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_ENTITY_LONG_NAME");

                entity.Property(e => e.EntEntityShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_ENTITY_SHORT_NAME");

                entity.Property(e => e.EntGroupCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_GROUP_CODE");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MESSAGE");

                entity.Property(e => e.InputRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("input_row_id");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastUpdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATE_TIME");

                entity.Property(e => e.LdOid).HasColumnName("LD_OID");

                entity.Property(e => e.RecLockFlag)
                    .HasColumnName("REC_LOCK_FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowSecFlag)
                    .HasColumnName("ROW_SEC_FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("ROW_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.TreatNullsAsNulls)
                    .HasColumnName("TREAT_NULLS_AS_NULLS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UpdatedUserid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDATED_USERID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_LEVEL");

                entity.Property(e => e.Validationcode)
                    .IsUnicode(false)
                    .HasColumnName("VALIDATIONCODE")
                    .HasDefaultValueSql("('ENTENT_')");

                entity.Property(e => e.WarningMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WARNING_MESSAGE");
            });

            modelBuilder.Entity<LdEntSubGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LD_ENT_SUB_GROUP", "MPP_APP");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ID");

                entity.Property(e => e.ApproverLevel)
                    .HasMaxLength(10)
                    .HasColumnName("APPROVER_LEVEL")
                    .IsFixedLength();

                entity.Property(e => e.ApproverStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_STATUS");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CreatedDate).HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_USER_ID");

                entity.Property(e => e.CurrentEditLevel).HasColumnName("CURRENT_EDIT_LEVEL");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("date")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.DateTo)
                    .HasColumnType("date")
                    .HasColumnName("DATE_TO");

                entity.Property(e => e.DummyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DUMMY_FLAG");

                entity.Property(e => e.EffectiveEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_END_DATE");

                entity.Property(e => e.EffectiveStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_START_DATE");

                entity.Property(e => e.EntEntityCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_ENTITY_CODE");

                entity.Property(e => e.EntSubGroupCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SUB_GROUP_CODE");

                entity.Property(e => e.EntSubGroupDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SUB_GROUP_DESC");

                entity.Property(e => e.EntSubGroupLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SUB_GROUP_LONG_NAME");

                entity.Property(e => e.EntSubGroupShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SUB_GROUP_SHORT_NAME");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MESSAGE");

                entity.Property(e => e.InputRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("INPUT_ROW_ID");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastUpdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATE_TIME");

                entity.Property(e => e.LdOid).HasColumnName("LD_OID");

                entity.Property(e => e.RecLockFlag)
                    .HasColumnName("REC_LOCK_FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RowSecFlag)
                    .HasColumnName("ROW_SEC_FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RowStatus)
                    .HasColumnName("ROW_STATUS")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.TreatNullsAsNulls)
                    .HasColumnName("TREAT_NULLS_AS_NULLS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UpdatedUserid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDATED_USERID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_LEVEL");

                entity.Property(e => e.Validationcode)
                    .IsUnicode(false)
                    .HasColumnName("VALIDATIONCODE")
                    .HasDefaultValueSql("('ENTSBG_')");

                entity.Property(e => e.WarningMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WARNING_MESSAGE");
            });

            modelBuilder.Entity<LoadEntity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LOAD_ENTITY", "MPP_APP");

                entity.Property(e => e.ActiveFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_FLAG");

                entity.Property(e => e.AddressLine1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_LINE_1");

                entity.Property(e => e.AddressLine2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS_LINE_2");

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_ID");

                entity.Property(e => e.ApproverLevel)
                    .HasMaxLength(10)
                    .HasColumnName("APPROVER_LEVEL")
                    .IsFixedLength();

                entity.Property(e => e.ApproverStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER_STATUS");

                entity.Property(e => e.CityName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CITY_NAME");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("COMMENTS");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_NAME");

                entity.Property(e => e.CreatedDate).HasColumnName("CREATED_DATE");

                entity.Property(e => e.CreatedUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CREATED_USER_ID");

                entity.Property(e => e.CurrentEditLevel).HasColumnName("CURRENT_EDIT_LEVEL");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("date")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.DateTo)
                    .HasColumnType("date")
                    .HasColumnName("DATE_TO");

                entity.Property(e => e.DummyFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DUMMY_FLAG");

                entity.Property(e => e.EffectiveEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_END_DATE");

                entity.Property(e => e.EffectiveStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EFFECTIVE_START_DATE");

                entity.Property(e => e.EntSiteCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SITE_CODE");

                entity.Property(e => e.EntSiteDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SITE_DESC");

                entity.Property(e => e.EntSiteLongName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SITE_LONG_NAME");

                entity.Property(e => e.EntSiteShortName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SITE_SHORT_NAME");

                entity.Property(e => e.EntSubGroupCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ENT_SUB_GROUP_CODE");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MESSAGE");

                entity.Property(e => e.InputRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("input_row_id");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_MODIFIED_BY");

                entity.Property(e => e.LastUpdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATE_TIME");

                entity.Property(e => e.Latitude)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LATITUDE");

                entity.Property(e => e.LdOid).HasColumnName("LD_OID");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.Longitude)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LONGITUDE");

                entity.Property(e => e.OtherLocationName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_LOCATION_NAME");

                entity.Property(e => e.Pincode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PINCODE");

                entity.Property(e => e.RecLockFlag).HasColumnName("REC_LOCK_FLAG");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REMARKS");

                entity.Property(e => e.RowSecFlag).HasColumnName("ROW_SEC_FLAG");

                entity.Property(e => e.RowStatus).HasColumnName("ROW_STATUS");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.SiteType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SITE_TYPE");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.StateName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("STATE_NAME");

                entity.Property(e => e.TreatNullsAsNulls).HasColumnName("TREAT_NULLS_AS_NULLS");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATE_DATE");

                entity.Property(e => e.UpdatedUserid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDATED_USERID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_LEVEL");

                entity.Property(e => e.Validationcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VALIDATIONCODE");

                entity.Property(e => e.WarningMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WARNING_MESSAGE");
            });

            modelBuilder.Entity<MppConfig>(entity =>
            {
                entity.HasKey(e => e.ParamName)
                    .HasName("MDM_CONFIG_PK");

                entity.ToTable("MPP_CONFIG", "MPP_CORE");

                entity.Property(e => e.ParamName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PARAM_NAME");

                entity.Property(e => e.ParamValue)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PARAM_VALUE");
            });

            modelBuilder.Entity<MppUser>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("MPP_USER", "MPP_CORE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.AdminFlag).HasColumnName("ADMIN_FLAG");

                entity.Property(e => e.ApproverFlag)
                    .HasColumnName("APPROVER_FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AuthType)
                    .HasColumnName("AUTH_TYPE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Isactive).HasColumnName("ISACTIVE");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE_CODE");

                entity.Property(e => e.Password)
                    .HasMaxLength(500)
                    .HasColumnName("PASSWORD")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_NAME");

                entity.Property(e => e.TotalRecords)
                    .HasMaxLength(50)
                    .HasColumnName("TOTAL_RECORDS")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_LEVEL")
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("USER_NAME");
            });

            modelBuilder.Entity<MppUserPrivilage>(entity =>
            {
                entity.HasKey(e => new { e.EntityTypeId, e.UserId })
                    .HasName("MPP_USER_PRIVILAGE_PK");

                entity.ToTable("MPP_USER_PRIVILAGE", "MPP_CORE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Approver)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER");

                entity.Property(e => e.CreateFlag)
                    .HasColumnName("CREATE_FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.ImportFlag)
                    .HasColumnName("IMPORT_FLAG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReadFlag)
                    .HasColumnName("READ_FLAG")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RoleId)
                    .HasColumnName("ROLE_ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UpdateFlag)
                    .HasColumnName("UPDATE_FLAG")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Querytext2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QUERYTEXT2", "MPP_APP");

                entity.Property(e => e.CurrentEditLevel).HasColumnName("CURRENT_EDIT_LEVEL");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.Dt1)
                    .HasColumnType("datetime")
                    .HasColumnName("DT1");

                entity.Property(e => e.Dt10)
                    .HasColumnType("datetime")
                    .HasColumnName("DT10");

                entity.Property(e => e.Dt2)
                    .HasColumnType("datetime")
                    .HasColumnName("DT2");

                entity.Property(e => e.Dt3)
                    .HasColumnType("datetime")
                    .HasColumnName("DT3");

                entity.Property(e => e.Dt4)
                    .HasColumnType("datetime")
                    .HasColumnName("DT4");

                entity.Property(e => e.Dt5)
                    .HasColumnType("datetime")
                    .HasColumnName("DT5");

                entity.Property(e => e.Dt6)
                    .HasColumnType("datetime")
                    .HasColumnName("DT6");

                entity.Property(e => e.Dt7)
                    .HasColumnType("datetime")
                    .HasColumnName("DT7");

                entity.Property(e => e.Dt8)
                    .HasColumnType("datetime")
                    .HasColumnName("DT8");

                entity.Property(e => e.Dt9)
                    .HasColumnType("datetime")
                    .HasColumnName("DT9");

                entity.Property(e => e.EntityInternalCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_INTERNAL_CODE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.ErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MESSAGE");

                entity.Property(e => e.InputRowId).HasColumnName("INPUT_ROW_ID");

                entity.Property(e => e.MandatoryAttrErrMesg)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY_ATTR_ERR_MESG");

                entity.Property(e => e.SessionId).HasColumnName("SESSION_ID");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.SuppliedCode1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIED_CODE1");

                entity.Property(e => e.SuppliedCode2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIED_CODE2");

                entity.Property(e => e.SuppliedCode3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIED_CODE3");

                entity.Property(e => e.SuppliedCode4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIED_CODE4");

                entity.Property(e => e.SuppliedCode5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIED_CODE5");

                entity.Property(e => e.TreatNullsAsNulls).HasColumnName("TREAT_NULLS_AS_NULLS");

                entity.Property(e => e.Vc0)
                    .IsUnicode(false)
                    .HasColumnName("VC0");

                entity.Property(e => e.Vc1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC1");

                entity.Property(e => e.Vc10)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC10");

                entity.Property(e => e.Vc11)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC11");

                entity.Property(e => e.Vc12)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC12");

                entity.Property(e => e.Vc13)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC13");

                entity.Property(e => e.Vc14)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC14");

                entity.Property(e => e.Vc15)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC15");

                entity.Property(e => e.Vc16)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC16");

                entity.Property(e => e.Vc17)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC17");

                entity.Property(e => e.Vc18)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC18");

                entity.Property(e => e.Vc19)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC19");

                entity.Property(e => e.Vc2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC2");

                entity.Property(e => e.Vc20)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC20");

                entity.Property(e => e.Vc21)
                    .IsUnicode(false)
                    .HasColumnName("VC21");

                entity.Property(e => e.Vc22)
                    .IsUnicode(false)
                    .HasColumnName("VC22");

                entity.Property(e => e.Vc23)
                    .IsUnicode(false)
                    .HasColumnName("VC23");

                entity.Property(e => e.Vc24)
                    .IsUnicode(false)
                    .HasColumnName("VC24");

                entity.Property(e => e.Vc25)
                    .IsUnicode(false)
                    .HasColumnName("VC25");

                entity.Property(e => e.Vc26)
                    .IsUnicode(false)
                    .HasColumnName("VC26");

                entity.Property(e => e.Vc27)
                    .IsUnicode(false)
                    .HasColumnName("VC27");

                entity.Property(e => e.Vc28)
                    .IsUnicode(false)
                    .HasColumnName("VC28");

                entity.Property(e => e.Vc29)
                    .IsUnicode(false)
                    .HasColumnName("VC29");

                entity.Property(e => e.Vc3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC3");

                entity.Property(e => e.Vc30)
                    .IsUnicode(false)
                    .HasColumnName("VC30");

                entity.Property(e => e.Vc31)
                    .IsUnicode(false)
                    .HasColumnName("VC31");

                entity.Property(e => e.Vc32)
                    .IsUnicode(false)
                    .HasColumnName("VC32");

                entity.Property(e => e.Vc33)
                    .IsUnicode(false)
                    .HasColumnName("VC33");

                entity.Property(e => e.Vc34)
                    .IsUnicode(false)
                    .HasColumnName("VC34");

                entity.Property(e => e.Vc35)
                    .IsUnicode(false)
                    .HasColumnName("VC35");

                entity.Property(e => e.Vc36)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC36");

                entity.Property(e => e.Vc37)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC37");

                entity.Property(e => e.Vc38)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC38");

                entity.Property(e => e.Vc39)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC39");

                entity.Property(e => e.Vc4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC4");

                entity.Property(e => e.Vc40)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC40");

                entity.Property(e => e.Vc41)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC41");

                entity.Property(e => e.Vc42)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC42");

                entity.Property(e => e.Vc43)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC43");

                entity.Property(e => e.Vc44)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC44");

                entity.Property(e => e.Vc45)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC45");

                entity.Property(e => e.Vc46)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC46");

                entity.Property(e => e.Vc47)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC47");

                entity.Property(e => e.Vc48)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC48");

                entity.Property(e => e.Vc49)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC49");

                entity.Property(e => e.Vc5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC5");

                entity.Property(e => e.Vc50)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC50");

                entity.Property(e => e.Vc6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC6");

                entity.Property(e => e.Vc7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC7");

                entity.Property(e => e.Vc8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC8");

                entity.Property(e => e.Vc9)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VC9");

                entity.Property(e => e.WarningMessage)
                    .IsUnicode(false)
                    .HasColumnName("WARNING_MESSAGE");
            });

            modelBuilder.Entity<Querytexttype2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QUERYTEXTTYPE2", "MPP_APP");

                entity.Property(e => e.CurrentEditLevel).HasColumnName("CURRENT_EDIT_LEVEL");

                entity.Property(e => e.DateFrom)
                    .HasColumnType("date")
                    .HasColumnName("DATE_FROM");

                entity.Property(e => e.EntityInternalCode)
                    .HasMaxLength(257)
                    .IsUnicode(false)
                    .HasColumnName("ENTITY_INTERNAL_CODE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MESSAGE");

                entity.Property(e => e.InputRowId).HasColumnName("INPUT_ROW_ID");

                entity.Property(e => e.IsIdentifyingRelation).HasColumnName("IS_IDENTIFYING_RELATION");

                entity.Property(e => e.ParentEntityTypeId).HasColumnName("PARENT_ENTITY_TYPE_ID");

                entity.Property(e => e.ParentInternalCode)
                    .HasMaxLength(257)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_INTERNAL_CODE");

                entity.Property(e => e.SessionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SESSION_ID");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.TreatNullsAsNulls).HasColumnName("TREAT_NULLS_AS_NULLS");
            });

            modelBuilder.HasSequence<int>("EditLevel", "MPP_CORE");

            modelBuilder.HasSequence<int>("OIDSEQUENCE", "MPP_CORE");

            modelBuilder.HasSequence("SEQ_INPUT_ROW_ID", "MPP_APP")
                .StartsAt(328718)
                .HasMin(1)
                .HasMax(2147483647);

            modelBuilder.HasSequence("SEQ_INPUT_ROW_ID", "MPP_CORE")
                .StartsAt(328718)
                .HasMin(1)
                .HasMax(2147483647);

            modelBuilder.HasSequence("SEQ_LD_OID", "MPP_CORE")
                .StartsAt(328718)
                .HasMin(1)
                .HasMax(2147483647);

            modelBuilder.HasSequence("SEQ_ROW_SEC_ID", "MPP_CORE")
                .StartsAt(428718)
                .HasMin(1)
                .HasMax(2147483647);

            modelBuilder.HasSequence("SEQ_SESSION", "MPP_APP")
                .StartsAt(328718)
                .HasMin(1)
                .HasMax(2147483647);

            modelBuilder.HasSequence("SEQ_SURROGATE", "MPP_CORE")
                .StartsAt(326758718)
                .HasMin(1)
                .HasMax(2147483647);

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}